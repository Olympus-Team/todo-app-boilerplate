name: CI

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
env:
  CI: true
  NODE_ENV: ci
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  lint:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        # yarn install prefer offline mode -> See .yarnrc to more information
        # @docs https://classic.yarnpkg.com/en/docs/yarnrc#yarn-offline-mirror-
        run: yarn install

      - run: yarn lint:eslint
  prettier:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      - run: yarn lint:prettier:check
  depcheck:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      - run: yarn depcheck
  build:
    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      - name: Cache build
        uses: actions/cache@v1
        with:
          path: dist
          key: ${{ runner.os }}-api-build-${{ github.sha }}

      - name: Build
        run: yarn build

  test:
    runs-on: ubuntu-latest

    timeout-minutes: 30

    services:
      postgres:
        # @docs https://github.com/postgis/docker-postgis
        image: mdillon/postgis:11.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2-beta

      # - name: Setup node
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: '12.x'

      - name: Restore node_modules
        uses: actions/cache@v1
        id: api-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-api-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Restore .npm cache
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            - ${{ runner.os }}-api-npm-cache-${{ hashFiles('yarn.lock') }}
            - ${{ runner.os }}-api-npm-cache-
      - name: Install dependencies
        if: steps.api-node-modules.outputs.cache-hit != 'true'
        run: yarn install

      # - run: npm run db:setup

      # - run: npx nyc mocha --ignore "test/server/graphql/**"

      - run: yarn test:coverage
